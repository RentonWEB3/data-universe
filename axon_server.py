import os
import json
import bittensor
from bittensor import Synapse, Wallet, Axon, Subtensor

INDEX_PATH = "miner_index.json"
CURRENT_INDEX = {}

def load_index():
    global CURRENT_INDEX
    if os.path.exists(INDEX_PATH):
        try:
            with open(INDEX_PATH, "r", encoding="utf-8") as f:
                CURRENT_INDEX = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å: {len(CURRENT_INDEX.get('buckets', []))} bucket‚Äô–æ–≤")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è miner_index.json:", e)
    else:
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! miner_index.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

def handler(syn: Synapse) -> Synapse:
    load_index()
    hotkey = getattr(syn.dendrite, "hotkey", "unknown")
    ip = getattr(syn.dendrite, "ip", "unknown")
    port = getattr(syn.dendrite, "port", "unknown")
    syn_name = getattr(syn, "name", "unknown")
    print(f"üì° –ó–∞–ø—Ä–æ—Å –æ—Ç {hotkey} ({ip}:{port}), —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {syn_name}")

    syn.compressed_index_serialized = json.dumps(CURRENT_INDEX)
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω miner_index.json")
    return syn

if __name__ == '__main__':
    wallet = Wallet(name="default", hotkey="default")
    ax = Axon(wallet=wallet, port=8091)
    ax.attach(forward_fn=handler)
    ax.start()

    subt = Subtensor()
    subt.serve_axon(axon=ax, netuid=13)  # ‚ùó –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ wallet

    print("‚úÖ Axon-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8091")
    while True:
        pass
